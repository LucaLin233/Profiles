# Port of HTTP(S) proxy server on the local end
port: 7890

# Port of SOCKS5 proxy server on the local end
socks-port: 7891

# Transparent proxy server port for Linux and macOS (Redirect TCP and TProxy UDP)
redir-port: 7892

# Transparent proxy server port for Linux (TProxy TCP and TProxy UDP)
tproxy-port: 7893

# HTTP(S) and SOCKS4(A)/SOCKS5 server on the same port
mixed-port: 7890

# authentication of local SOCKS5/HTTP(S) server
# authentication:
#  - "user1:pass1"
#  - "user2:pass2"

# Set to true to allow connections to the local-end server from
# other LAN IP addresses
allow-lan: true

# This is only applicable when `allow-lan` is `true`
# '*': bind all IP addresses
# 192.168.122.11: bind a single IPv4 address
# "[aaaa::a8aa:ff:fe09:57d8]": bind a single IPv6 address
bind-address: '*'

# Clash router working mode
# rule: rule-based packet routing
# global: all packets will be forwarded to a single endpoint
# direct: directly forward the packets to the Internet
mode: rule

# Clash by default prints logs to STDOUT
# info / warning / error / debug / silent
log-level: info

# When set to false, resolver won't translate hostnames to IPv6 addresses
ipv6: true

# RESTful web API listening address
external-controller: 127.0.0.1:9090

# A relative path to the configuration directory or an absolute path to a
# directory in which you put some static web resource. Clash core will then
# serve it at `${API}/ui`.
# external-ui: folder

# Secret for the RESTful API (optional)
# Authenticate by spedifying HTTP header `Authorization: Bearer ${secret}`
# ALWAYS set a secret if RESTful API is listening on 0.0.0.0
# secret: ""

# 实验性功能
experimental:
  ignore-resolve-fail: true # 忽略 DNS 解析失败，默认值为 true

# Outbound interface name
# interface-name: en0

# Static hosts for DNS server and connection establishment (like /etc/hosts)
#
# Wildcard hostnames are supported (e.g. *.clash.dev, *.foo.*.example.com)
# Non-wildcard domain names have a higher priority than wildcard domain names
# e.g. foo.example.com > *.example.com > .example.com
# P.S. +.foo.com equals to .foo.com and foo.com
hosts:
  # '*.clash.dev': 127.0.0.1
  # '.dev': 127.0.0.1
  # 'alpha.clash.dev': '::1'

  # Firebase Cloud Messaging
  'mtalk.google.com': 108.177.125.188

profile:
  # Store the `select` results in $HOME/.config/clash/.cache
  # set false If you don't want this behavior
  # when two different configurations have groups with the same name, the selected values are shared
  store-selected: false

# DNS server settings
# This section is optional. When not present, the DNS server will be disabled.
dns:
  enable: true
  listen: 0.0.0.0:53
  ipv6: true # when the false, response to AAAA questions will be empty

  # These nameservers are used to resolve the DNS nameserver hostnames below.
  # Specify IP addresses only
  default-nameserver:
    - 223.5.5.5
    - 223.6.6.6
    - 114.114.114.114
    # - "[2400:3200::1]:53"
    # - "[2400:3200:baba::1]:53"
  enhanced-mode: fake-ip # or fake-ip
  fake-ip-range: 10.123.0.0/16 # Fake IP addresses pool CIDR
  # use-hosts: true # lookup hosts and return IP record
  
  # Hostnames in this list will not be resolved with fake IPs
  # i.e. questions to these domain names will always be answered with their
  # real IP addresses
  fake-ip-filter:
    - '*.lan'
    - 'cable.auth.com'
    - '+.msftconnecttest.com'
    - '+.msftncsi.com'
    - 'network-test.debian.org'
    - 'detectportal.firefox.com'
    - 'resolver1.opendns.com'
    - '+.srv.nintendo.net'
    - '+.stun.playstation.net'
    - 'xbox.*.microsoft.com'
    - '+.xboxlive.com'
    - 'stun.*'
    - 'global.turn.twilio.com'
    - 'global.stun.twilio.com'
    - 'localhost.*.qq.com'
    - '+.logon.battlenet.com.cn'
    - '+.logon.battle.net'
    - '+.blzstatic.cn'
    - '+.cmpassport.com'
    - 'id6.me'
    - 'open.e.189.cn'
    - 'mdn.open.wo.cn'
    - 'opencloud.wostore.cn'
    - 'auth.wosms.cn'
    - '+.jegotrip.com.cn'
    - '+.icitymobile.mobi'
    - '+.pingan.com.cn'
    - '+.cmbchina.com'
    - '+.cmbchina.com.cn'
    - '+?miwifi.com'
    - 'pool.ntp.org'
    - '+.pool.ntp.org'
    - 'ntp.*.com'
    - 'time.*.com'
    - 'ntp?.*.com'
    - 'time?.*.com'
    - 'time.*.gov'
    - 'time.*.edu.cn'
    - '+.ntp.org.cn'
    - 'time.*.apple.com'
    - 'PDC._msDCS.*.*'
    - 'DC._msDCS.*.*'
    - 'GC._msDCS.*.*'
  
  # Supports UDP, TCP, DoT, DoH. You can specify the port to connect to.
  # All DNS questions are sent directly to the nameserver, without proxies
  # involved. Clash answers the DNS question with the first result gathered.
  nameserver:
    # - dhcp://en0
    - https://223.5.5.5/dns-query
    - https://223.6.6.6/dns-query
    # - h3://dns.alidns.com/dns-query
    # - 114.114.114.114 # default value
    # - 8.8.8.8 # default value
    # - tls://dns.rubyfish.cn:853 # DNS over TLS
    # - https://1.1.1.1/dns-query # DNS over HTTPS
    # - dhcp://en0 # dns from dhcp

  # When `fallback` is present, the DNS server will send concurrent requests
  # to the servers in this section along with servers in `nameservers`.
  # The answers from fallback servers are used when the GEOIP country
  # is not `CN`.
  # fallback:
  #   - tls://8.8.8.8:853 # Google
  #   - https://dns.google/dns-query # Google
  #   - tls://1.1.1.1 # cloudflare
  #   - https://1.1.1.1/dns-query # cloudflare

  # If IP addresses resolved with servers in `nameservers` are in the specified
  # subnets below, they are considered invalid and results from `fallback`
  # servers are used instead.
  #
  # IP address resolved with servers in `nameserver` is used when
  # `fallback-filter.geoip` is true and when GEOIP of the IP address is `CN`.
  #
  # If `fallback-filter.geoip` is false, results from `nameserver` nameservers
  # are always used if not match `fallback-filter.ipcidr`.
  #
  # This is a countermeasure against DNS pollution attacks.
  fallback-filter:
    geoip: false
    geoip-code: CN
    ipcidr:
      - 240.0.0.0/4
      - 0.0.0.0/32
    # domain:
    #   - '+.google.com'
    #   - '+.facebook.com'
    #   - '+.youtube.com'
  
  # Lookup domains via specific nameservers
  # nameserver-policy:
  #   'www.baidu.com': '114.114.114.114'
  #   '+.internal.crop.com': '10.0.0.1'

#
# https://github.com/Dreamacro/clash/wiki/premium-core-features
#
# tun:
#   enable: true
#   stack: system # or gvisor
#   # dns-hijack:
#   #   - 8.8.8.8:53
#   #   - tcp://8.8.8.8:53
#   macOS-auto-route: true # auto set global route
#   macOS-auto-detect-interface: true # conflict with interface-name

proxies:
# 支持的协议及加密算法示例请查阅 Clash 项目 README 以使用最新格式：https://github.com/Dreamacro/clash/wiki/configuration

# 服务器节点订阅
proxy-providers:
  # name: # Provider 名称
  #   type: http # http 或 file
  #   path: # 文件路径
  #   url: # 只有当类型为 HTTP 时才可用，您不需要在本地空间中创建新文件。
  #   interval: # 自动更新间隔，仅在类型为 HTTP 时可用
  #   health-check: # 健康检查选项从此处开始
  #     enable:
  #     url: 
  #     interval: 

  #
  # 「url」参数填写订阅链接
  #
  # 订阅链接可以使用 API 进行转换，如：https://dove.589669.xyz/web
  #
  #

  # 此处只是订阅示例，如果没有订阅链接的使用需求，此处及 proxy-groups 的相关内容可删除

  Airport: &Airport #「机场」订阅
    type: http
    url: "https://gist.githubusercontent.com/ocd0711/xxxxx/raw/OCD-CLASH" # 放机场订阅链接
    interval: 3600
    path: ./Proxy/List.yaml # 注意此处文件名不可相同
    health-check:
      enable: true
      interval: 600
      url: http://cp.cloudflare.com/generate_204

  HK: #「机场」订阅香港地区节点
    <<: *Airport #引用锚点内容
    filter: '(香港|HK)'
  
  TW: #「机场」订阅台湾地区节点
    <<: *Airport #引用锚点内容
    filter: '(台湾|TW)'

  US: #「机场」订阅美国地区节点
    <<: *Airport #引用锚点内容
    filter: '(美国|US)'

  JP: #「机场」订阅日本地区节点
    <<: *Airport #引用锚点内容
    filter: '(日本|JP)'

  SG: #「机场」订阅新加坡地区节点
    <<: *Airport #引用锚点内容
    filter: '(新加坡|SG)'

proxy-groups:
# 策略组示例请查阅 Clash 项目 README 以使用最新格式：https://github.com/Dreamacro/clash/wiki/configuration

#
# 策略组说明
#
# 「MATCH」类似 Surge 的「Final」，此处用于选择白名单模式(PROXY 策略)和黑名单模式(DIRECT 策略)
#
# 「Streaming」和「StreamingSE」比较好理解，有专用于流媒体的节点就设置到其中，如果没有「StreamingSE」的需求可以连带 Rule 部分一起删掉，「Streaming」需至少保留 Rule，用「PROXY」即可。
#
# 「PROXY」是代理规则策略，它可以指定为某个节点或嵌套一个其他策略组，如：「自动测试」、「Fallback」或「负载均衡」的策略组，关于这 3 个策略组的具体示例可以看官方示例：https://github.com/Dreamacro/clash
#

  # 注意此处的「use」而不是「proxies」，当然也可以不用在此先嵌套一个策略组进行选择，可以直接使用，如
  #
  # # 代理节点选择
  # - name: "PROXY"
  #   type: select
  #   use:
  #     - DuckDuckGo # 嵌套使用订阅节点策略组
  #   proxies:
  #     - Fallback
  #     - 1
  #     - 2
  #     - 3
  #
  # 但如果订阅节点很多选起来就很麻烦，不如先嵌套一个策略组进行手动或自动的选择。

  # 代理节点选择
  - name: "PROXY"
    type: select
    proxies:
      - AutoTest
      - HK
      - TW
      - JP
      - US
      - SG
      - DIRECT
    use:
      - Airport

  # 白名单模式 PROXY, 黑名单模式 DIRECT, 不知道别动
  - name: "MATCH"
    type: select
    proxies:
      - PROXY
      - DIRECT

  # Steam 流媒体
  - name: "Steam"
    type: select
    proxies:
      - PROXY
      - HK
      - TW
      - JP
      - US
      - SG
      - DIRECT

  # YouTube
  - name: "YouTube"
    type: select
    proxies:
      - PROXY
      - HK
      - TW
      - JP
      - US
      - SG

  # 国际流媒体服务
  - name: "Streaming"
    type: select
    proxies:
      - PROXY
      - HK
      - TW
      - JP
      - US
      - SG

  # Emby 流媒体
  - name: "Emby"
    type: select
    proxies:
      - DIRECT
      - PROXY
      - HK
      - TW
      - JP
      - US
      - SG

  # ChatGPT
  - name: "ChatGPT"
    type: select
    proxies:
      - PROXY
      - HK
      - TW
      - JP
      - US
      - SG

  # 中国流媒体服务（面向海外版本）
  # 用于观看部分国内流媒体面向港澳台的地区的限定内容，此处应放港澳台节点，如果没有此需求可删除此处策略组及相关规则
  - name: "StreamingSE"
    type: select
    proxies:
      - DIRECT
      - HK
      - TW
    use:
      - HK
      - TW

  # Telegram 分流
  - name: "Telegram"
    type: select
    proxies:
      - PROXY
      - HK
      - TW
      - JP
      - US
      - SG

  # Paypal 加速
  - name: "Paypal"
    type: select
    proxies:
      - US
      - PROXY
      - HK
      - TW
      - JP
      - SG
      - DIRECT

  # Speedtest 分流
  - name: "Speedtest"
    type: select
    proxies:
      - PROXY
      - HK
      - TW
      - JP
      - US
      - SG
      - DIRECT

  # 广告
  - name: "AdBlock"
    type: select
    proxies:
      - REJECT
      - DIRECT

  - name: "AutoTest"
    type: url-test # 亦可使用 fallback 或 load-balance
    use: # 注意此处是「use」
      - Airport # 这是上面「proxy-providers」的名称
    url: http://cp.cloudflare.com/generate_204
    interval: "3600"

  - name: "US"
    type: fallback # 亦可使用 fallback 或 load-balance
    use: # 注意此处是「use」
      - US # 这是上面「proxy-providers」的名称
    url: http://cp.cloudflare.com/generate_204
    interval: "3600"

  - name: "TW"
    type: fallback # 亦可使用 fallback 或 load-balance
    use: # 注意此处是「use」
      - TW # 这是上面「proxy-providers」的名称
    url: http://cp.cloudflare.com/generate_204
    interval: "3600"

  - name: "HK"
    type: fallback # 亦可使用 fallback 或 load-balance
    use: # 注意此处是「use」
      - HK # 这是上面「proxy-providers」的名称
    url: http://cp.cloudflare.com/generate_204
    interval: "3600"

  - name: "JP"
    type: fallback # 亦可使用 fallback 或 load-balance
    use: # 注意此处是「use」
      - JP # 这是上面「proxy-providers」的名称
    url: http://cp.cloudflare.com/generate_204
    interval: "3600"

  - name: "SG"
    type: fallback # 亦可使用 fallback 或 load-balance
    use: # 注意此处是「use」
      - SG # 这是上面「proxy-providers」的名称
    url: http://cp.cloudflare.com/generate_204
    interval: "3600"

# 关于 Rule Provider 请查阅：https://lancellc.gitbook.io/clash/clash-config-file/rule-provider

rule-providers:
# name: # Provider 名称
#   type: http # http 或 file
#   behavior: classical # 或 ipcidr、domain
#   path: # 文件路径
#   url: # 只有当类型为 HTTP 时才可用，您不需要在本地空间中创建新文件。
#   interval: # 自动更新间隔，仅在类型为 HTTP 时可用

  Special:
    type: http
    behavior: classical
    path: ./RuleSet/Special.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Special.yaml
    interval: 86400

  Reject:
    type: http
    behavior: classical
    path: ./RuleSet/Advertising/Reject.yaml
    url:   https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Reject.yaml
    interval: 86400

  Steam:
    type: http
    behavior: classical
    path: ./RuleSet/Steam.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Steam.yaml
    interval: 86400

  YouTube:
    type: http
    behavior: classical
    path: ./RuleSet/Media/YouTube.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/YouTube.yaml
    interval: 86400

  YouTube_Music:
    type: http
    behavior: classical
    path: ./RuleSet/Media/YouTube_Music.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/YouTube%20Music.yaml
    interval: 86400

  Netflix:
    type: http
    behavior: classical
    path: ./RuleSet/Media/Netflix.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Netflix.yaml
    interval: 86400

  Spotify:
    type: http
    behavior: classical
    path: ./RuleSet/Media/Spotify.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Spotify.yaml
    interval: 86400

  Disney_Plus:
    type: http
    behavior: classical
    path: ./RuleSet/Media/Disney_Plus.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Disney%20Plus.yaml
    interval: 86400

  ABC:
    type: http
    behavior: classical
    path: ./RuleSet/Media/ABC.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/ABC.yaml
    interval: 86400

  Abema_TV:
    type: http
    behavior: classical
    path: ./RuleSet/Media/Abema_TV.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Abema%20TV.yaml
    interval: 86400

  Amazon:
    type: http
    behavior: classical
    path: ./RuleSet/Media/Amazon.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Amazon.yaml
    interval: 86400

  Apple_Music:
    type: http
    behavior: classical
    path: ./RuleSet/Media/Apple_Music.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Apple%20Music.yaml
    interval: 86400

  Apple_News:
    type: http
    behavior: classical
    path: ./RuleSet/Media/Apple_News.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Apple%20News.yaml
    interval: 86400

  Apple_TV:
    type: http
    behavior: classical
    path: ./RuleSet/Media/Apple_TV.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Apple%20TV.yaml
    interval: 86400

  Bahamut:
    type: http
    behavior: classical
    path: ./RuleSet/Media/Bahamut.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Bahamut.yaml
    interval: 86400

  BBC_iPlayer:
    type: http
    behavior: classical
    path: ./RuleSet/Media/BBC_iPlayer.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/BBC%20iPlayer.yaml
    interval: 86400

  DAZN:
    type: http
    behavior: classical
    path: ./RuleSet/Media/DAZN.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/DAZN.yaml
    interval: 86400

  Discovery_Plus:
    type: http
    behavior: classical
    path: ./RuleSet/Media/Discovery_Plus.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Discovery%20Plus.yaml
    interval: 86400

  encoreTVB:
    type: http
    behavior: classical
    path: ./RuleSet/Media/encoreTVB.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/encoreTVB.yaml
    interval: 86400

  F1_TV:
    type: http
    behavior: classical
    path: ./RuleSet/Media/F1_TV.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/F1%20TV.yaml
    interval: 86400

  Fox_Now:
    type: http
    behavior: classical
    path: ./RuleSet/Media/Fox_Now.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Fox%20Now.yaml
    interval: 86400

  Fox+:
    type: http
    behavior: classical
    path: ./RuleSet/Media/Fox+.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Fox%2B.yaml
    interval: 86400

  HBO_Go:
    type: http
    behavior: classical
    path: ./RuleSet/Media/HBO_Go.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/HBO%20Go.yaml
    interval: 86400

  HBO_Max:
    type: http
    behavior: classical
    path: ./RuleSet/Media/HBO_Max.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/HBO%20Max.yaml
    interval: 86400

  Hulu_Japan:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Hulu%20Japan.yaml
    path: ./RuleSet/Media/Hulu_Japan.yaml
    interval: 86400

  Hulu:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Hulu.yaml
    path: ./RuleSet/Media/Hulu.yaml
    interval: 86400

  Japonx:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Japonx.yaml
    path: ./RuleSet/Media/Japonx.yaml
    interval: 86400

  JOOX:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/JOOX.yaml
    path: ./RuleSet/Media/JOOX.yaml
    interval: 86400

  KKBOX:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/KKBOX.yaml
    path: ./RuleSet/Media/KKBOX.yaml
    interval: 86400

  KKTV:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/KKTV.yaml
    path: ./RuleSet/Media/KKTV.yaml
    interval: 86400

  Line_TV:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Line%20TV.yaml
    path: ./RuleSet/Media/Line_TV.yaml
    interval: 86400

  myTV_SUPER:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/myTV%20SUPER.yaml
    path: ./RuleSet/Media/myTV_SUPER.yaml
    interval: 86400

  Niconico:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Niconico.yaml
    path: ./RuleSet/Media/Niconico.yaml
    interval: 86400

  Pandora:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Pandora.yaml
    path: ./RuleSet/Media/Pandora.yaml
    interval: 86400

  PBS:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/PBS.yaml
    path: ./RuleSet/Media/PBS.yaml
    interval: 86400

  Pornhub:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Pornhub.yaml
    path: ./RuleSet/Media/Pornhub.yaml
    interval: 86400

  Soundcloud:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Soundcloud.yaml
    path: ./RuleSet/Media/Soundcloud.yaml
    interval: 86400

  ViuTV:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/ViuTV.yaml
    path: ./RuleSet/Media/ViuTV.yaml
    interval: 86400

  Bilibili:
    type: http
    behavior: classical
    path: ./RuleSet/StreamingMedia/Bilibili.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Bilibili.yaml
    interval: 86400

  IQ:
    type: http
    behavior: classical
    path: ./RuleSet/StreamingMedia/IQI.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/IQ.yaml
    interval: 86400

  IQIYI:
    type: http
    behavior: classical
    path: ./RuleSet/StreamingMedia/IQYI.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/IQIYI.yaml
    interval: 86400

  Letv:
    type: http
    behavior: classical
    path: ./RuleSet/StreamingMedia/Letv.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Letv.yaml
    interval: 86400

  # MOO:
  #   type: http
  #   behavior: classical
  #   path: ./RuleSet/StreamingMedia/MOO.yaml
  #   url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/MOO.yaml
  #   interval: 86400

  Netease_Music:
    type: http
    behavior: classical
    path: ./RuleSet/StreamingMedia/Netease_Music.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Netease%20Music.yaml
    interval: 86400

  Tencent_Video:
    type: http
    behavior: classical
    path: ./RuleSet/StreamingMedia/Tencent_Video.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Tencent%20Video.yaml
    interval: 86400

  Youku:
    type: http
    behavior: classical
    path: ./RuleSet/StreamingMedia/Youku.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Youku.yaml
    interval: 86400

  WeTV:
    type: http
    behavior: classical
    path: ./RuleSet/StreamingMedia/WeTV.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/WeTV.yaml
    interval: 86400

  Telegram:
    type: http
    behavior: classical
    path: ./RuleSet/Telegram.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Telegram.yaml
    interval: 86400

  PayPal:
    type: http
    behavior: classical
    path: ./RuleSet/PayPal.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/PayPal.yaml
    interval: 86400

  Speedtest:
    type: http
    behavior: classical
    path: ./RuleSet/Speedtest.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Speedtest.yaml
    interval: 86400

  Apple:
    type: http
    behavior: classical
    path: ./RuleSet/Apple/Apple.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Apple.yaml
    interval: 86400

  Global:
    type: http
    behavior: classical
    path: ./RuleSet/Global/Proxy.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Proxy.yaml
    interval: 86400

  Domestic:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Domestic.yaml
    path: ./RuleSet/Domestic/Domestic.yaml
    interval: 86400

  Domestic_IPs:
    type: http
    behavior: ipcidr
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Domestic%20IPs.yaml
    path: ./RuleSet/Domestic/Domestic_IPs.yaml
    interval: 86400

  LAN:
    type: http
    behavior: classical
    path: ./RuleSet/LAN.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/LAN.yaml
    interval: 86400

  Emby:
    type: http
    behavior: classical
    path: ./RuleSet/emby.yaml
    url: https://raw.githubusercontent.com/ocd0711/Profiles/master/Clash/Ruleset/emby.yaml
    interval: 86400

  ChatGPT:
    type: http
    behavior: classical
    path: ./RuleSet/ChatGPT.yaml
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/ChatGPT.yaml
    interval: 86400

# 规则
rules:
  # 直连和广告拦截
  - RULE-SET,Special,DIRECT
  - RULE-SET,Reject,AdBlock

  # Steam 单独分流
  - RULE-SET,Steam,Steam

  # YouTube 单独分流
  - RULE-SET,YouTube,YouTube
  - RULE-SET,YouTube_Music,YouTube

  # Streaming 国际流媒体服务
  - RULE-SET,Netflix,Streaming
  - RULE-SET,Spotify,Streaming
  - RULE-SET,Disney_Plus,Streaming
  - RULE-SET,ABC,Streaming
  - RULE-SET,Abema_TV,Streaming
  - RULE-SET,Amazon,Streaming
  - RULE-SET,Apple_Music,DIRECT
  - RULE-SET,Apple_News,Streaming
  - RULE-SET,Apple_TV,Streaming
  - RULE-SET,Bahamut,Streaming
  - RULE-SET,BBC_iPlayer,Streaming
  - RULE-SET,DAZN,Streaming
  - RULE-SET,Discovery_Plus,Streaming
  - RULE-SET,encoreTVB,Streaming
  - RULE-SET,F1_TV,Streaming
  - RULE-SET,Fox_Now,Streaming
  - RULE-SET,Fox+,Streaming
  - RULE-SET,HBO_Go,Streaming
  - RULE-SET,HBO_Max,Streaming
  - RULE-SET,Hulu_Japan,Streaming
  - RULE-SET,Hulu,Streaming
  - RULE-SET,Japonx,Streaming
  - RULE-SET,JOOX,Streaming
  - RULE-SET,KKBOX,Streaming
  - RULE-SET,KKTV,Streaming
  - RULE-SET,Line_TV,Streaming
  - RULE-SET,myTV_SUPER,Streaming
  - RULE-SET,Niconico,Streaming
  - RULE-SET,Pandora,Streaming
  - RULE-SET,PBS,Streaming
  - RULE-SET,Pornhub,Streaming
  - RULE-SET,Soundcloud,Streaming
  - RULE-SET,ViuTV,Streaming

  # Emby 流媒体
  - RULE-SET,Emby,Emby

  # ChatGPT
  - RULE-SET,ChatGPT,ChatGPT

  # StreamingSE 中国流媒体服务 (面向海外版本)
  - RULE-SET,Bilibili,StreamingSE
  - RULE-SET,IQ,StreamingSE
  - RULE-SET,IQIYI,StreamingSE
  - RULE-SET,Letv,StreamingSE
  # - RULE-SET,MOO,StreamingSE
  - RULE-SET,Netease_Music,StreamingSE
  - RULE-SET,Tencent_Video,StreamingSE
  - RULE-SET,Youku,StreamingSE
  - RULE-SET,WeTV,StreamingSE

  # Telegram 加速
  - RULE-SET,Telegram,Telegram

  # Paypal 加速
  - RULE-SET,PayPal,Paypal

  # Speedtest 分流
  - RULE-SET,Speedtest,Speedtest

  # Apple 服务
  - RULE-SET,Apple,DIRECT

  # Global 全球加速
  - RULE-SET,Global,PROXY

  # China 中国直连
  - RULE-SET,Domestic,DIRECT
  - RULE-SET,Domestic_IPs,DIRECT

  # Local Area Network 局域网
  - RULE-SET,LAN,DIRECT

  # GeoIP China
  - GEOIP,CN,DIRECT

  - MATCH,MATCH